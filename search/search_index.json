{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Maldita Producci\u00f3n Una gu\u00eda cortita y al pie para Glyphs 3.2 Esta gu\u00eda es un recordatorio de cosas que revisar al terminar una tipograf\u00eda. Glifos que por lo que sea dan problemas, rellenar el Font Info, una estrategia para los nombres y esas cosas que preferir\u00edamos ignorar de las fuentes variables. Con un poco de suerte una nueva versi\u00f3n de Glyphs dejar\u00e1 obsoleta la mitad de la gu\u00eda, pero por ahora acabar fuentes es un conocimiento arcano solo apto para amantes del Terminal y toca aprender a convivir con ello. Preparando todo Cosas a instalar para ir tirando. \u00a1Chequea, maldito! Lo que se te olvida y luego vienen los llantos. El archivo OpenType Porque hemos venido a este mundo a sufrir. Rellenando el Font Info Abandonad toda esperanza los que aqu\u00ed entr\u00e9is. Generamos las fuentes No olviden santiguarse mientras pulsan \u2318+E.","title":"Home"},{"location":"#maldita-produccion","text":"","title":"Maldita Producci\u00f3n"},{"location":"#una-guia-cortita-y-al-pie-para-glyphs-32","text":"Esta gu\u00eda es un recordatorio de cosas que revisar al terminar una tipograf\u00eda. Glifos que por lo que sea dan problemas, rellenar el Font Info, una estrategia para los nombres y esas cosas que preferir\u00edamos ignorar de las fuentes variables. Con un poco de suerte una nueva versi\u00f3n de Glyphs dejar\u00e1 obsoleta la mitad de la gu\u00eda, pero por ahora acabar fuentes es un conocimiento arcano solo apto para amantes del Terminal y toca aprender a convivir con ello. Preparando todo Cosas a instalar para ir tirando. \u00a1Chequea, maldito! Lo que se te olvida y luego vienen los llantos. El archivo OpenType Porque hemos venido a este mundo a sufrir. Rellenando el Font Info Abandonad toda esperanza los que aqu\u00ed entr\u00e9is. Generamos las fuentes No olviden santiguarse mientras pulsan \u2318+E.","title":"Una gu\u00eda cortita y al pie para Glyphs 3.2"},{"location":"about/","text":"Acerca de\u2026 Escrita por Juanjo L\u00f3pez , mayo de 2023.","title":"Acerca de\u2026"},{"location":"about/#acerca-de","text":"Escrita por Juanjo L\u00f3pez , mayo de 2023.","title":"Acerca de\u2026"},{"location":"archivo-opentype/","text":"El archivo OpenType Al exportar desde Glyphs, creamos archivos .ttf .otf .woff etc. Por mucho que nos guste Glyphs, hay cosas que no acaban de exportarse como deber\u00edan (al menos en mayo de 2023). Aqu\u00ed hay un buen cirio montado entre lo que dice la especificaci\u00f3n OpenType que debe ser el archivo, lo que exporta Glyphs y lo que los sistemas operativos y los programas de todo tipo leen en el archivo. Si entendemos algo el archivo podremos ver porqu\u00e9 fallan las cosas y si podemos arreglarlas. En el archivo la informaci\u00f3n se guarda en tablas, una para los nombres, otra para los trazados, para el orden de los glifos, etc. Hay programas como OTMaster y FontTable Viewer (gratuito) para ver las tablas de los archivos OpenType. Para acceder de forma sencilla y modificar el archivo (incluso con programaci\u00f3n Python) necesitaremos TTX. TTX TTX es un programa que convierte un archivo .otf o .ttf a XML haciendo que sea legible. Luego tambi\u00e9n convierte el XML de vuelta al tipo de archivo que queramos. Bot\u00f3n derecho sobre la carpeta que tengamos la fuente / \"Abrir terminal en la carpeta\". ttx (arrastramos el archivo.otf) \u2192 ttx Usuario/ruta_al_archivo.otf|ttf Y ya podemos abrirlo con un editor de texto ( va guay, hay que indicarle que es un XML abajo a la izquierda). ttx archivo.ttx : Y vuelve a ser otf. ttx -f archivo.ttx : Sobreescribe el otf original ttx -t -STAT (archivo) : Extrae s\u00f3lo la tabla STAT . ttx -t -STAT -o STAT.ttx (archivo) : extrae s\u00f3lo la tabla STAT y nombra el archivo ttx como - queramos. Para volver a unir (merge) la STAT al archivo: ttx -m \"archivoVAR.ttf\" -o \"archivoVAR.ttf\" STAT.ttx Una vez que tenemos la tablas al aire, vamos a ver algunas: Tablas Opentype name En la tabla name se encuentran todas las palabras en una fuente. Las cosas que nosotros tenemos que leer tipo el Copyright, el dise\u00f1ador, los nombres de los pesos, etc. Cuando rellenamos algo en Font Info, normalmente va a parar a la tabla name. Hay 26 (del 0 al 25) nombres (nameID) que est\u00e1n predefinidos. nameID=\"0\" ser\u00eda el copyright, por ejemplo. Aqu\u00ed puedes verlos todos . Luego, del 256 en adelante est\u00e1n libres para lo que sea. Entre el 26 y el 255 no se pone nada. La \u00fanica parte complicada de la tabla name es nombrar correctamente las familias y estilos. Por temas de compatibilidad con sistemas operativos y formatos de fuentes antiguos, nombrar las fuentes y estilos y que se vean en los men\u00fas como queremos no es tan sencillo como podr\u00eda parecer. Si rellenamos bien el \"Font Info\", Glyphs nos rellenar\u00e1 la tabla name bien y podremos seguir sin tener que cambiar nada. Vemos a ver qu\u00e9 nameID tenemos y para qu\u00e9 sirven: ID 1 e ID 2 Son IDs para Windows. Para programas en los que las familias s\u00f3lo tienen cuatro estilos que se escogen con style linking: Regular, Italic, Bold y Bold Italic (RIBBI). ID 1: Family Name: Times New Roman ID 2: Subfamily Name: Regular, Italic, Bold o Bold Italic El resto de la familia tiene este aspecto: ID 1: Family Name: Times New Roman SemiBold ID 2: Subfamily Name: Regular o Italic Para Word incluso podemos acortar (Rg, It, Bd, etc) porque el men\u00fa es estrecho. ID 16 e ID 17 Son los IDs de los men\u00fas fet\u00e9n, los de Adobe y similares. Tenemos el nombre de la tipo y luego el submen\u00fa con todos los estilos. ID 16: Typographic Family Name: Times New Roman ID 17: Typographic Subfamily Name: SemiBold Italic ID 21 e ID 22 Nombres WWS: Weight Width Slope. S\u00f3lo se ponen en ID 22 estos tres ejes. Normalmente no se necesita poner. ID 21: WWS Family Name: Times New Roman Display ID 22: WWS Subfamily Name: SemiBold Condensed ID 4 Es la suma del 16 y 17 ID 4: Full Font Name: Times New Roman SemiBold Italic ID 6 El nombre PostScript. Es el nombre completo pero sin espacios. El espacio entre familia y estilo se sustituye por un gui\u00f3n. Es importante porque es el que usa, por ejemplo, el PDF. ID 6: PostScript Name: TimesNewRoman-SemiBoldItalic En principio deber\u00edamos tenerlo todo en su sitio si rellenamos bien los nombres en el \"Font Info\". Con el custom parameter \"Font / Name Table Entry\" podemos rellenar algunos de los par\u00e1metros a mano. OS/2 Tiene m\u00e9tricas para representar las fuentes. Aqu\u00ed va lo que ponemos en Weight class, Width class, Panose, fsType, algunas vertical metrics, etc. En principio no hay mucho que pueda fallar aqu\u00ed. STAT La tabla STAT ahora mismo no puede leerla ning\u00fan programa, pero en teor\u00eda ser\u00e1 la que se use en el futuro para nombrar los estilos de las fuentes. Vamos, que otra tabla extra para lo mismo. La idea es que en un mundo de fuentes variables con tropecientos estilos los men\u00fas cl\u00e1sicos ser\u00e1n impracticables, as\u00ed que describiendo c\u00f3mo son nuestros ejes y donde est\u00e1n las instancias, las combinaciones nos dar\u00edan el nombre del lugar del espacio de dise\u00f1o en el que estamos. Todo esto ser\u00eda genial si no fuese porque Glyphs (versi\u00f3n 3.2 en mayo de 2023) no la exporta perfecta. As\u00ed que aqu\u00ed S\u00cd que toca meter mano al XML (si usas Glpyhs 3.1 es directamente escribirla a mano de lo mal que est\u00e1) Si exportamos una tipo variable con tres ejes opsz , wght e ital , podemos abrirla en Samsa y ver c\u00f3mo se comporta en la pesta\u00f1a STAT. Qu\u00e9 pinta tiene Y si nos movemos por nuestro XML hasta llegar a la STAT veremos algo as\u00ed: <STAT> <Version value=\"0x00010001\"/> <DesignAxisRecordSize value=\"8\"/> <!-- DesignAxisCount=3 --> <DesignAxisRecord> <Axis index=\"0\"> <AxisTag value=\"opsz\"/> <AxisNameID value=\"256\"/> <!-- Optical size --> <AxisOrdering value=\"0\"/> </Axis> <Axis index=\"1\"> <AxisTag value=\"wght\"/> <AxisNameID value=\"257\"/> <!-- Weight --> <AxisOrdering value=\"1\"/> </Axis> <Axis index=\"2\"> <AxisTag value=\"ital\"/> <AxisNameID value=\"313\"/> <!-- Italic --> <AxisOrdering value=\"2\"/> </Axis> </DesignAxisRecord> Lo que nos interesa aqu\u00ed: <!-- DesignAxisCount=3 --> Osea, que hay tres ejes <Axis index=\"0\"> <AxisTag value=\"opsz\"/> <AxisNameID value=\"256\"/> <!-- Optical size --> <AxisOrdering value=\"0\"/> </Axis> y el primero es el n\u00famero 0 (los ordenadores empiezan a contar por cero), tiene el tag opsz , su nombre est\u00e1 en la tabla name en el ID 256 (\"Optical size\") y tiene el orden 0 en los men\u00fas. El eje italic ( ital ) est\u00e1 siempre aunque no haga falta, vete a saber porqu\u00e9. El orden recomendado para los ejes es: opsz-wdth-wght-ital . En principio todo bien, s\u00f3lo es para entenderlo. Vemos que los ejes est\u00e1n descritos al principio de la tabla. Instancias Ahora vamos con las instancias: <!-- AxisValueCount=13 --> <AxisValueArray> <AxisValue index=\"0\" Format=\"1\"> <AxisIndex value=\"0\"/> <Flags value=\"0\"/> <ValueNameID value=\"260\"/> <!-- Small --> <Value value=\"6.0\"/> </AxisValue> <AxisValue index=\"1\" Format=\"1\"> <AxisIndex value=\"0\"/> <Flags value=\"2\"/> <!-- ElidableAxisValueName --> <ValueNameID value=\"2\"/> <!-- Regular --> <Value value=\"10.0\"/> </AxisValue> <AxisValue index=\"2\" Format=\"1\"> <AxisIndex value=\"0\"/> <Flags value=\"0\"/> <ValueNameID value=\"287\"/> <!-- Subhead --> <Value value=\"18.0\"/> </AxisValue> <AxisValue index=\"3\" Format=\"1\"> <AxisIndex value=\"0\"/> <Flags value=\"0\"/> <ValueNameID value=\"301\"/> <!-- Display --> <Value value=\"36.0\"/> </AxisValue> <AxisValue index=\"4\" Format=\"1\"> <AxisIndex value=\"1\"/> <Flags value=\"0\"/> <ValueNameID value=\"272\"/> <!-- Book --> <Value value=\"300.0\"/> </AxisValue> <AxisValue index=\"5\" Format=\"1\"> <AxisIndex value=\"1\"/> <Flags value=\"2\"/> <!-- ElidableAxisValueName --> <ValueNameID value=\"2\"/> <!-- Regular --> <Value value=\"400.0\"/> </AxisValue> <AxisValue index=\"6\" Format=\"3\"> <AxisIndex value=\"1\"/> <Flags value=\"2\"/> <!-- ElidableAxisValueName --> <ValueNameID value=\"2\"/> <!-- Regular --> <Value value=\"400.0\"/> <LinkedValue value=\"700.0\"/> </AxisValue> <AxisValue index=\"7\" Format=\"1\"> <AxisIndex value=\"1\"/> <Flags value=\"0\"/> <ValueNameID value=\"275\"/> <!-- Medium --> <Value value=\"500.0\"/> </AxisValue> <AxisValue index=\"8\" Format=\"1\"> <AxisIndex value=\"1\"/> <Flags value=\"0\"/> <ValueNameID value=\"277\"/> <!-- SemiBold --> <Value value=\"600.0\"/> </AxisValue> <AxisValue index=\"9\" Format=\"1\"> <AxisIndex value=\"1\"/> <Flags value=\"0\"/> <ValueNameID value=\"279\"/> <!-- Bold --> <Value value=\"700.0\"/> </AxisValue> <AxisValue index=\"10\" Format=\"1\"> <AxisIndex value=\"1\"/> <Flags value=\"0\"/> <ValueNameID value=\"281\"/> <!-- Black --> <Value value=\"800.0\"/> </AxisValue> <AxisValue index=\"11\" Format=\"1\"> <AxisIndex value=\"1\"/> <Flags value=\"0\"/> <ValueNameID value=\"283\"/> <!-- Heavy --> <Value value=\"900.0\"/> </AxisValue> <AxisValue index=\"12\" Format=\"3\"> <AxisIndex value=\"2\"/> <Flags value=\"2\"/> <!-- ElidableAxisValueName --> <ValueNameID value=\"2\"/> <!-- Regular --> <Value value=\"0.0\"/> <LinkedValue value=\"1.0\"/> </AxisValue> </AxisValueArray> <ElidedFallbackNameID value=\"2\"/> <!-- Regular --> </STAT> Y aqu\u00ed vemos que hay 13 instancias: 4 para tama\u00f1os \u00f3pticos, 7 para pesos, y dos repetidas de Regular (El Regular de abajo del todo es otra cosa). Cada peso tiene esta estructura: <AxisValue index=\"8\" Format=\"1\"> <AxisIndex value=\"1\"/> <Flags value=\"0\"/> <ValueNameID value=\"277\"/> <!-- SemiBold --> <Value value=\"600.0\"/> </AxisValue> Esto es la instancia 8, que tiene formato 1. Que est\u00e1 en el eje 1 (el segundo, Weight, el primero es 0) Lo del Flags 0 es que es una instancia del mont\u00f3n El nameID es donde tenemos el texto \"SemiBold\" que aparecer\u00e1 en los men\u00fas. Y est\u00e1 en el punto 600 de nuestro eje. Luego los Regulars tienen esto m\u00e1s raro: <AxisValue index=\"5\" Format=\"1\"> <AxisIndex value=\"1\"/> <Flags value=\"2\"/> <!-- ElidableAxisValueName --> <ValueNameID value=\"2\"/> <!-- Regular --> <Value value=\"400.0\"/> </AxisValue> <AxisValue index=\"6\" Format=\"3\"> <AxisIndex value=\"1\"/> <Flags value=\"2\"/> <!-- ElidableAxisValueName --> <ValueNameID value=\"2\"/> <!-- Regular --> <Value value=\"400.0\"/> <LinkedValue value=\"700.0\"/> </AxisValue> Est\u00e1n dos veces, la primera en formato 1 y las segunda en formato 3. La 1 es la normalita pero la 3 significa que ese peso de valor=400 tiene style linking, con un LinkedValue=700. Osea, que el Regular cambia a Bold si haces \"Cmd-B\" en Indesign o clicas la B del men\u00fa en un programa de textos. En ambas el Flags value es 2 y pone ElidableAxisValueName . Eso significa que si nos movemos por el eje con los sliders en vez de Times Display Regular, pondr\u00e1 Times Display a secas. M\u00e1s que nada para que en una tipo con cuatro ejes no salga Times Regular Bold Regular Regular. Problemas Aqu\u00ed hay dos problemas: Que no se recomienda tener duplicado el Regular en formato 1 y 3. As\u00ed que habr\u00eda que borrar el primero. Es facilito con nuestro XML y para cuando leas esto igual ya est\u00e1 arreglado en Glyphs. Que hay un formato 2 mucho mejor que el 1 que Glyphs no sabe hacer solito. En este formato especificamos el valor de la instancia, pero tambi\u00e9n un rango m\u00ednimo y m\u00e1ximo para que todas las posiciones del eje tengan nombre. Tendr\u00eda esta pinta: <AxisValue index=\"8\" Format=\"2\"> <AxisIndex value=\"1\"/> <Flags value=\"0\"/> <ValueNameID value=\"277\"/> <!-- SemiBold --> <NominalValue value=\"600.0\"/> <RangeMinValue value=\"550.0\"/> <RangeMaxValue value=\"650.0\"/> </AxisValue> Donde antes hab\u00eda un s\u00f3lo valor, ahora tenemos tres. Uno nominal tambi\u00e9n de 600 y un rango m\u00ednimo y m\u00e1ximo que suelen llegar a medio camino de la siguiente instancia. El el peso m\u00e1s fino el rango m\u00ednimo y el nominal ser\u00eda el mismo y en el m\u00e1s grueso el nominal y el m\u00e1ximo tambi\u00e9n. En cuanto al Regular y al style linking quedar\u00edan as\u00ed: <AxisValue index=\"5\" Format=\"2\"> <AxisIndex value=\"0\"/> <Flags value=\"2\"/> <!-- ElidableAxisValueName --> <ValueNameID value=\"2\"/> <!-- Regular --> <NominalValue value=\"400.0\"/> <RangeMinValue value=\"350.0\"/> <RangeMaxValue value=\"450.0\"/> </AxisValue> <AxisValue index=\"6\" Format=\"3\"> <AxisIndex value=\"0\"/> <Flags value=\"2\"/> <!-- ElidableAxisValueName --> <ValueNameID value=\"2\"/> <!-- Regular --> <Value value=\"400.0\"/> <LinkedValue value=\"700.0\"/> </AxisValue> El Format 3 lo dejamos como est\u00e1 y el Format 1 lo pasamos al 2. Ah, y abajo del todo de nuestra tabla tenemos el style linking para la Italic, que normalmente est\u00e1 en otro archivo. En este caso el valor de la romana es 0.0 y el de la cursiva 1.0: <AxisValue index=\"12\" Format=\"3\"> <AxisIndex value=\"2\"/> <Flags value=\"2\"/> <!-- ElidableAxisValueName --> <ValueNameID value=\"2\"/> <!-- Regular --> <Value value=\"0.0\"/> <LinkedValue value=\"1.0\"/> </AxisValue> Y este trozo \u00faltimo es el nombre para cuando todos los ejes est\u00e9n en Regular, que en ese caso s\u00ed aparece un Regular: <ElidedFallbackNameID value=\"2\"/> <!-- Regular --> Si ahora probamos en Samsa veremos que la fuente tiene nombre estemos donde estemos en el espacio de dise\u00f1o. \u00a1Enhorabuena, hemos triunfado sobre la t\u00e9cnica! AVAR Aqu\u00ed vemos el mapeo que hemos hecho con Axis Location . El master de origen ser\u00eda 0.0. FVAR Aqu\u00ed vemos definidos los ejes, las instancias y los nombres que tendr\u00e1n en el men\u00fa. Encima de cada instancia tenemos su postscriptNameID y su subfamilyNameID . En el master de origen el postscriptNameID sale del ID 6 y el subfamilyNameID de ID 17 En el resto se calcula con ID 25 + subfamilyNameID En Glyphs podemos usar el Custom Parameter \"Postscript Name Prefix\" para poner el ID 25, que debe ser diferente a las est\u00e1ticas. Si no se pone, Glyphs usar\u00e1 \"Localized Family Name\" sin espacios.","title":"Archivo Opentype"},{"location":"archivo-opentype/#el-archivo-opentype","text":"Al exportar desde Glyphs, creamos archivos .ttf .otf .woff etc. Por mucho que nos guste Glyphs, hay cosas que no acaban de exportarse como deber\u00edan (al menos en mayo de 2023). Aqu\u00ed hay un buen cirio montado entre lo que dice la especificaci\u00f3n OpenType que debe ser el archivo, lo que exporta Glyphs y lo que los sistemas operativos y los programas de todo tipo leen en el archivo. Si entendemos algo el archivo podremos ver porqu\u00e9 fallan las cosas y si podemos arreglarlas. En el archivo la informaci\u00f3n se guarda en tablas, una para los nombres, otra para los trazados, para el orden de los glifos, etc. Hay programas como OTMaster y FontTable Viewer (gratuito) para ver las tablas de los archivos OpenType. Para acceder de forma sencilla y modificar el archivo (incluso con programaci\u00f3n Python) necesitaremos TTX.","title":"El archivo OpenType"},{"location":"archivo-opentype/#ttx","text":"TTX es un programa que convierte un archivo .otf o .ttf a XML haciendo que sea legible. Luego tambi\u00e9n convierte el XML de vuelta al tipo de archivo que queramos. Bot\u00f3n derecho sobre la carpeta que tengamos la fuente / \"Abrir terminal en la carpeta\". ttx (arrastramos el archivo.otf) \u2192 ttx Usuario/ruta_al_archivo.otf|ttf Y ya podemos abrirlo con un editor de texto ( va guay, hay que indicarle que es un XML abajo a la izquierda). ttx archivo.ttx : Y vuelve a ser otf. ttx -f archivo.ttx : Sobreescribe el otf original ttx -t -STAT (archivo) : Extrae s\u00f3lo la tabla STAT . ttx -t -STAT -o STAT.ttx (archivo) : extrae s\u00f3lo la tabla STAT y nombra el archivo ttx como - queramos. Para volver a unir (merge) la STAT al archivo: ttx -m \"archivoVAR.ttf\" -o \"archivoVAR.ttf\" STAT.ttx Una vez que tenemos la tablas al aire, vamos a ver algunas:","title":"TTX"},{"location":"archivo-opentype/#tablas-opentype","text":"","title":"Tablas Opentype"},{"location":"archivo-opentype/#name","text":"En la tabla name se encuentran todas las palabras en una fuente. Las cosas que nosotros tenemos que leer tipo el Copyright, el dise\u00f1ador, los nombres de los pesos, etc. Cuando rellenamos algo en Font Info, normalmente va a parar a la tabla name. Hay 26 (del 0 al 25) nombres (nameID) que est\u00e1n predefinidos. nameID=\"0\" ser\u00eda el copyright, por ejemplo. Aqu\u00ed puedes verlos todos . Luego, del 256 en adelante est\u00e1n libres para lo que sea. Entre el 26 y el 255 no se pone nada. La \u00fanica parte complicada de la tabla name es nombrar correctamente las familias y estilos. Por temas de compatibilidad con sistemas operativos y formatos de fuentes antiguos, nombrar las fuentes y estilos y que se vean en los men\u00fas como queremos no es tan sencillo como podr\u00eda parecer. Si rellenamos bien el \"Font Info\", Glyphs nos rellenar\u00e1 la tabla name bien y podremos seguir sin tener que cambiar nada. Vemos a ver qu\u00e9 nameID tenemos y para qu\u00e9 sirven:","title":"name"},{"location":"archivo-opentype/#id-1-e-id-2","text":"Son IDs para Windows. Para programas en los que las familias s\u00f3lo tienen cuatro estilos que se escogen con style linking: Regular, Italic, Bold y Bold Italic (RIBBI). ID 1: Family Name: Times New Roman ID 2: Subfamily Name: Regular, Italic, Bold o Bold Italic El resto de la familia tiene este aspecto: ID 1: Family Name: Times New Roman SemiBold ID 2: Subfamily Name: Regular o Italic Para Word incluso podemos acortar (Rg, It, Bd, etc) porque el men\u00fa es estrecho.","title":"ID 1 e ID 2"},{"location":"archivo-opentype/#id-16-e-id-17","text":"Son los IDs de los men\u00fas fet\u00e9n, los de Adobe y similares. Tenemos el nombre de la tipo y luego el submen\u00fa con todos los estilos. ID 16: Typographic Family Name: Times New Roman ID 17: Typographic Subfamily Name: SemiBold Italic","title":"ID 16 e ID 17"},{"location":"archivo-opentype/#id-21-e-id-22","text":"Nombres WWS: Weight Width Slope. S\u00f3lo se ponen en ID 22 estos tres ejes. Normalmente no se necesita poner. ID 21: WWS Family Name: Times New Roman Display ID 22: WWS Subfamily Name: SemiBold Condensed","title":"ID 21 e ID 22"},{"location":"archivo-opentype/#id-4","text":"Es la suma del 16 y 17 ID 4: Full Font Name: Times New Roman SemiBold Italic","title":"ID 4"},{"location":"archivo-opentype/#id-6","text":"El nombre PostScript. Es el nombre completo pero sin espacios. El espacio entre familia y estilo se sustituye por un gui\u00f3n. Es importante porque es el que usa, por ejemplo, el PDF. ID 6: PostScript Name: TimesNewRoman-SemiBoldItalic En principio deber\u00edamos tenerlo todo en su sitio si rellenamos bien los nombres en el \"Font Info\". Con el custom parameter \"Font / Name Table Entry\" podemos rellenar algunos de los par\u00e1metros a mano.","title":"ID 6"},{"location":"archivo-opentype/#os2","text":"Tiene m\u00e9tricas para representar las fuentes. Aqu\u00ed va lo que ponemos en Weight class, Width class, Panose, fsType, algunas vertical metrics, etc. En principio no hay mucho que pueda fallar aqu\u00ed.","title":"OS/2"},{"location":"archivo-opentype/#stat","text":"La tabla STAT ahora mismo no puede leerla ning\u00fan programa, pero en teor\u00eda ser\u00e1 la que se use en el futuro para nombrar los estilos de las fuentes. Vamos, que otra tabla extra para lo mismo. La idea es que en un mundo de fuentes variables con tropecientos estilos los men\u00fas cl\u00e1sicos ser\u00e1n impracticables, as\u00ed que describiendo c\u00f3mo son nuestros ejes y donde est\u00e1n las instancias, las combinaciones nos dar\u00edan el nombre del lugar del espacio de dise\u00f1o en el que estamos. Todo esto ser\u00eda genial si no fuese porque Glyphs (versi\u00f3n 3.2 en mayo de 2023) no la exporta perfecta. As\u00ed que aqu\u00ed S\u00cd que toca meter mano al XML (si usas Glpyhs 3.1 es directamente escribirla a mano de lo mal que est\u00e1) Si exportamos una tipo variable con tres ejes opsz , wght e ital , podemos abrirla en Samsa y ver c\u00f3mo se comporta en la pesta\u00f1a STAT.","title":"STAT"},{"location":"archivo-opentype/#que-pinta-tiene","text":"Y si nos movemos por nuestro XML hasta llegar a la STAT veremos algo as\u00ed: <STAT> <Version value=\"0x00010001\"/> <DesignAxisRecordSize value=\"8\"/> <!-- DesignAxisCount=3 --> <DesignAxisRecord> <Axis index=\"0\"> <AxisTag value=\"opsz\"/> <AxisNameID value=\"256\"/> <!-- Optical size --> <AxisOrdering value=\"0\"/> </Axis> <Axis index=\"1\"> <AxisTag value=\"wght\"/> <AxisNameID value=\"257\"/> <!-- Weight --> <AxisOrdering value=\"1\"/> </Axis> <Axis index=\"2\"> <AxisTag value=\"ital\"/> <AxisNameID value=\"313\"/> <!-- Italic --> <AxisOrdering value=\"2\"/> </Axis> </DesignAxisRecord> Lo que nos interesa aqu\u00ed: <!-- DesignAxisCount=3 --> Osea, que hay tres ejes <Axis index=\"0\"> <AxisTag value=\"opsz\"/> <AxisNameID value=\"256\"/> <!-- Optical size --> <AxisOrdering value=\"0\"/> </Axis> y el primero es el n\u00famero 0 (los ordenadores empiezan a contar por cero), tiene el tag opsz , su nombre est\u00e1 en la tabla name en el ID 256 (\"Optical size\") y tiene el orden 0 en los men\u00fas. El eje italic ( ital ) est\u00e1 siempre aunque no haga falta, vete a saber porqu\u00e9. El orden recomendado para los ejes es: opsz-wdth-wght-ital . En principio todo bien, s\u00f3lo es para entenderlo. Vemos que los ejes est\u00e1n descritos al principio de la tabla.","title":"Qu\u00e9 pinta tiene"},{"location":"archivo-opentype/#instancias","text":"Ahora vamos con las instancias: <!-- AxisValueCount=13 --> <AxisValueArray> <AxisValue index=\"0\" Format=\"1\"> <AxisIndex value=\"0\"/> <Flags value=\"0\"/> <ValueNameID value=\"260\"/> <!-- Small --> <Value value=\"6.0\"/> </AxisValue> <AxisValue index=\"1\" Format=\"1\"> <AxisIndex value=\"0\"/> <Flags value=\"2\"/> <!-- ElidableAxisValueName --> <ValueNameID value=\"2\"/> <!-- Regular --> <Value value=\"10.0\"/> </AxisValue> <AxisValue index=\"2\" Format=\"1\"> <AxisIndex value=\"0\"/> <Flags value=\"0\"/> <ValueNameID value=\"287\"/> <!-- Subhead --> <Value value=\"18.0\"/> </AxisValue> <AxisValue index=\"3\" Format=\"1\"> <AxisIndex value=\"0\"/> <Flags value=\"0\"/> <ValueNameID value=\"301\"/> <!-- Display --> <Value value=\"36.0\"/> </AxisValue> <AxisValue index=\"4\" Format=\"1\"> <AxisIndex value=\"1\"/> <Flags value=\"0\"/> <ValueNameID value=\"272\"/> <!-- Book --> <Value value=\"300.0\"/> </AxisValue> <AxisValue index=\"5\" Format=\"1\"> <AxisIndex value=\"1\"/> <Flags value=\"2\"/> <!-- ElidableAxisValueName --> <ValueNameID value=\"2\"/> <!-- Regular --> <Value value=\"400.0\"/> </AxisValue> <AxisValue index=\"6\" Format=\"3\"> <AxisIndex value=\"1\"/> <Flags value=\"2\"/> <!-- ElidableAxisValueName --> <ValueNameID value=\"2\"/> <!-- Regular --> <Value value=\"400.0\"/> <LinkedValue value=\"700.0\"/> </AxisValue> <AxisValue index=\"7\" Format=\"1\"> <AxisIndex value=\"1\"/> <Flags value=\"0\"/> <ValueNameID value=\"275\"/> <!-- Medium --> <Value value=\"500.0\"/> </AxisValue> <AxisValue index=\"8\" Format=\"1\"> <AxisIndex value=\"1\"/> <Flags value=\"0\"/> <ValueNameID value=\"277\"/> <!-- SemiBold --> <Value value=\"600.0\"/> </AxisValue> <AxisValue index=\"9\" Format=\"1\"> <AxisIndex value=\"1\"/> <Flags value=\"0\"/> <ValueNameID value=\"279\"/> <!-- Bold --> <Value value=\"700.0\"/> </AxisValue> <AxisValue index=\"10\" Format=\"1\"> <AxisIndex value=\"1\"/> <Flags value=\"0\"/> <ValueNameID value=\"281\"/> <!-- Black --> <Value value=\"800.0\"/> </AxisValue> <AxisValue index=\"11\" Format=\"1\"> <AxisIndex value=\"1\"/> <Flags value=\"0\"/> <ValueNameID value=\"283\"/> <!-- Heavy --> <Value value=\"900.0\"/> </AxisValue> <AxisValue index=\"12\" Format=\"3\"> <AxisIndex value=\"2\"/> <Flags value=\"2\"/> <!-- ElidableAxisValueName --> <ValueNameID value=\"2\"/> <!-- Regular --> <Value value=\"0.0\"/> <LinkedValue value=\"1.0\"/> </AxisValue> </AxisValueArray> <ElidedFallbackNameID value=\"2\"/> <!-- Regular --> </STAT> Y aqu\u00ed vemos que hay 13 instancias: 4 para tama\u00f1os \u00f3pticos, 7 para pesos, y dos repetidas de Regular (El Regular de abajo del todo es otra cosa). Cada peso tiene esta estructura: <AxisValue index=\"8\" Format=\"1\"> <AxisIndex value=\"1\"/> <Flags value=\"0\"/> <ValueNameID value=\"277\"/> <!-- SemiBold --> <Value value=\"600.0\"/> </AxisValue> Esto es la instancia 8, que tiene formato 1. Que est\u00e1 en el eje 1 (el segundo, Weight, el primero es 0) Lo del Flags 0 es que es una instancia del mont\u00f3n El nameID es donde tenemos el texto \"SemiBold\" que aparecer\u00e1 en los men\u00fas. Y est\u00e1 en el punto 600 de nuestro eje. Luego los Regulars tienen esto m\u00e1s raro: <AxisValue index=\"5\" Format=\"1\"> <AxisIndex value=\"1\"/> <Flags value=\"2\"/> <!-- ElidableAxisValueName --> <ValueNameID value=\"2\"/> <!-- Regular --> <Value value=\"400.0\"/> </AxisValue> <AxisValue index=\"6\" Format=\"3\"> <AxisIndex value=\"1\"/> <Flags value=\"2\"/> <!-- ElidableAxisValueName --> <ValueNameID value=\"2\"/> <!-- Regular --> <Value value=\"400.0\"/> <LinkedValue value=\"700.0\"/> </AxisValue> Est\u00e1n dos veces, la primera en formato 1 y las segunda en formato 3. La 1 es la normalita pero la 3 significa que ese peso de valor=400 tiene style linking, con un LinkedValue=700. Osea, que el Regular cambia a Bold si haces \"Cmd-B\" en Indesign o clicas la B del men\u00fa en un programa de textos. En ambas el Flags value es 2 y pone ElidableAxisValueName . Eso significa que si nos movemos por el eje con los sliders en vez de Times Display Regular, pondr\u00e1 Times Display a secas. M\u00e1s que nada para que en una tipo con cuatro ejes no salga Times Regular Bold Regular Regular.","title":"Instancias"},{"location":"archivo-opentype/#problemas","text":"Aqu\u00ed hay dos problemas: Que no se recomienda tener duplicado el Regular en formato 1 y 3. As\u00ed que habr\u00eda que borrar el primero. Es facilito con nuestro XML y para cuando leas esto igual ya est\u00e1 arreglado en Glyphs. Que hay un formato 2 mucho mejor que el 1 que Glyphs no sabe hacer solito. En este formato especificamos el valor de la instancia, pero tambi\u00e9n un rango m\u00ednimo y m\u00e1ximo para que todas las posiciones del eje tengan nombre. Tendr\u00eda esta pinta: <AxisValue index=\"8\" Format=\"2\"> <AxisIndex value=\"1\"/> <Flags value=\"0\"/> <ValueNameID value=\"277\"/> <!-- SemiBold --> <NominalValue value=\"600.0\"/> <RangeMinValue value=\"550.0\"/> <RangeMaxValue value=\"650.0\"/> </AxisValue> Donde antes hab\u00eda un s\u00f3lo valor, ahora tenemos tres. Uno nominal tambi\u00e9n de 600 y un rango m\u00ednimo y m\u00e1ximo que suelen llegar a medio camino de la siguiente instancia. El el peso m\u00e1s fino el rango m\u00ednimo y el nominal ser\u00eda el mismo y en el m\u00e1s grueso el nominal y el m\u00e1ximo tambi\u00e9n. En cuanto al Regular y al style linking quedar\u00edan as\u00ed: <AxisValue index=\"5\" Format=\"2\"> <AxisIndex value=\"0\"/> <Flags value=\"2\"/> <!-- ElidableAxisValueName --> <ValueNameID value=\"2\"/> <!-- Regular --> <NominalValue value=\"400.0\"/> <RangeMinValue value=\"350.0\"/> <RangeMaxValue value=\"450.0\"/> </AxisValue> <AxisValue index=\"6\" Format=\"3\"> <AxisIndex value=\"0\"/> <Flags value=\"2\"/> <!-- ElidableAxisValueName --> <ValueNameID value=\"2\"/> <!-- Regular --> <Value value=\"400.0\"/> <LinkedValue value=\"700.0\"/> </AxisValue> El Format 3 lo dejamos como est\u00e1 y el Format 1 lo pasamos al 2. Ah, y abajo del todo de nuestra tabla tenemos el style linking para la Italic, que normalmente est\u00e1 en otro archivo. En este caso el valor de la romana es 0.0 y el de la cursiva 1.0: <AxisValue index=\"12\" Format=\"3\"> <AxisIndex value=\"2\"/> <Flags value=\"2\"/> <!-- ElidableAxisValueName --> <ValueNameID value=\"2\"/> <!-- Regular --> <Value value=\"0.0\"/> <LinkedValue value=\"1.0\"/> </AxisValue> Y este trozo \u00faltimo es el nombre para cuando todos los ejes est\u00e9n en Regular, que en ese caso s\u00ed aparece un Regular: <ElidedFallbackNameID value=\"2\"/> <!-- Regular --> Si ahora probamos en Samsa veremos que la fuente tiene nombre estemos donde estemos en el espacio de dise\u00f1o. \u00a1Enhorabuena, hemos triunfado sobre la t\u00e9cnica!","title":"Problemas"},{"location":"archivo-opentype/#avar","text":"Aqu\u00ed vemos el mapeo que hemos hecho con Axis Location . El master de origen ser\u00eda 0.0.","title":"AVAR"},{"location":"archivo-opentype/#fvar","text":"Aqu\u00ed vemos definidos los ejes, las instancias y los nombres que tendr\u00e1n en el men\u00fa. Encima de cada instancia tenemos su postscriptNameID y su subfamilyNameID . En el master de origen el postscriptNameID sale del ID 6 y el subfamilyNameID de ID 17 En el resto se calcula con ID 25 + subfamilyNameID En Glyphs podemos usar el Custom Parameter \"Postscript Name Prefix\" para poner el ID 25, que debe ser diferente a las est\u00e1ticas. Si no se pone, Glyphs usar\u00e1 \"Localized Family Name\" sin espacios.","title":"FVAR"},{"location":"chequea-maldito/","text":"\u00a1Chequea, maldito! Chequeo de problemas tontos \"Paths/Correct Path Directions\": Mejor haberlo hecho antes, ahora te jodes si se fastidia todo. Crear el glifo /nbspace (uni00A0), se hace solo a partir del espacio. Crear /softhyphen (u00AD). Asegurarse de que todas las letras est\u00e9n en un grupo de kerning. Chequear los glifos con dotbelow , que fallan a veces. Revisar prosas de Q \u01a0 \u01af \u01fe (o mejor, usar \"=|@300\" o similar en el espaciado y olvidarse) Revisar el kerning de /lcaron, /dcaron, y /tcaron. Revisar ligaduras, \u00e6 y \u0153 Pon un texto de descripci\u00f3n en los Stylistic Sets . Revisar los componentes anidados. No dejar componentes dentro de otros en los archivos finales. \"Scripts/Mekkablue/Components/Component Problem Finder\" y hay un plugin \"mekkablue/UnnestComponents\" en el Plugin Manager. Scripts de chequeo de Trazados: \"Mekkablue/Paths/Path Problem Finder\" \"Mekkablue/Paths/Find Near vertical Misses\" \"Mekkablue/Paths/Rewire Fire\" \"Mekkablue/Paths/New Tab with Small Paths\" (entre 600-700 square units. Activar After Overlap ...) \"Mekkablue/Paths/Green Blue Manager\" Estos scripts ponen emojis en los nodos con fallo y te dejan la tipo hecha un asco. Para borrar los emojis volver a chequear o: \"Mekkablue/Glyphs Names.../Garbage Collection\" Scripts de chequeo de interpolaci\u00f3n: \"Mekkablue/Interpolation/Find Shapesifting Glyphs\" \"Mekkablue/Interpolation/Travel Tracker\" \"Mekkablue/Interpolation/Kink Finder\" \"Mekkablue/Interpolation/Dekink Master Layers\" \"Mekkablue/Interpolation/New Tab with Dangerous...\" Chequeo tras deshacer componentes Es buena idea deshacer componentes en glifos donde los componentes se solapen (/Tbar, /dollar, /cedilla, etc) aunque para Variables dejar los componentes puede hacer todo m\u00e1s facil. Hacer bonica la uni\u00f3n de /ogoneks, /uhorn y /ohorn si procede. Chequeo de problemas con Fontbakery Se hace en el Terminal . Es un programilla de Google para chequear fuentes OpenType. Se puede hacer el check de Adobe, de Google, etc. Bot\u00f3n derecho sobre la carpeta que tengamos la fuente / Abrir Terminal en la carpeta. fontbakery check-adobe (arrastramos el archivo) Si todo est\u00e1 OK saldr\u00e1 una magdalena, si no toca pringar. Algunos de estos errores ser\u00e1n de dibujo, de los vertical metrics, de cualquier cosa, vamos. Unas pocas opciones extra: fontbakery -l FAIL check-adobe archivo para ver s\u00f3lo \ud83d\udd25 FAILs fontbakery check-adobefonts --html test.html nombre_de_archivo.html para tener los - resultados en html. fontbakery check-adobefonts --github-markdown test.md nombre_de_archivo.md para tener los resultados en Markdown. fontbakery -h para ver tooodas las opciones (o --help ). fontbakery check-adobefonts --help para ver la ayuda del check de Adobe concretamente.","title":"Chequea maldito!"},{"location":"chequea-maldito/#chequea-maldito","text":"","title":"\u00a1Chequea, maldito!"},{"location":"chequea-maldito/#chequeo-de-problemas-tontos","text":"\"Paths/Correct Path Directions\": Mejor haberlo hecho antes, ahora te jodes si se fastidia todo. Crear el glifo /nbspace (uni00A0), se hace solo a partir del espacio. Crear /softhyphen (u00AD). Asegurarse de que todas las letras est\u00e9n en un grupo de kerning. Chequear los glifos con dotbelow , que fallan a veces. Revisar prosas de Q \u01a0 \u01af \u01fe (o mejor, usar \"=|@300\" o similar en el espaciado y olvidarse) Revisar el kerning de /lcaron, /dcaron, y /tcaron. Revisar ligaduras, \u00e6 y \u0153 Pon un texto de descripci\u00f3n en los Stylistic Sets . Revisar los componentes anidados. No dejar componentes dentro de otros en los archivos finales. \"Scripts/Mekkablue/Components/Component Problem Finder\" y hay un plugin \"mekkablue/UnnestComponents\" en el Plugin Manager.","title":"Chequeo de problemas tontos"},{"location":"chequea-maldito/#scripts-de-chequeo-de-trazados","text":"\"Mekkablue/Paths/Path Problem Finder\" \"Mekkablue/Paths/Find Near vertical Misses\" \"Mekkablue/Paths/Rewire Fire\" \"Mekkablue/Paths/New Tab with Small Paths\" (entre 600-700 square units. Activar After Overlap ...) \"Mekkablue/Paths/Green Blue Manager\" Estos scripts ponen emojis en los nodos con fallo y te dejan la tipo hecha un asco. Para borrar los emojis volver a chequear o: \"Mekkablue/Glyphs Names.../Garbage Collection\"","title":"Scripts de chequeo de Trazados:"},{"location":"chequea-maldito/#scripts-de-chequeo-de-interpolacion","text":"\"Mekkablue/Interpolation/Find Shapesifting Glyphs\" \"Mekkablue/Interpolation/Travel Tracker\" \"Mekkablue/Interpolation/Kink Finder\" \"Mekkablue/Interpolation/Dekink Master Layers\" \"Mekkablue/Interpolation/New Tab with Dangerous...\"","title":"Scripts de chequeo de interpolaci\u00f3n:"},{"location":"chequea-maldito/#chequeo-tras-deshacer-componentes","text":"Es buena idea deshacer componentes en glifos donde los componentes se solapen (/Tbar, /dollar, /cedilla, etc) aunque para Variables dejar los componentes puede hacer todo m\u00e1s facil. Hacer bonica la uni\u00f3n de /ogoneks, /uhorn y /ohorn si procede.","title":"Chequeo tras deshacer componentes"},{"location":"chequea-maldito/#chequeo-de-problemas-con-fontbakery","text":"Se hace en el Terminal . Es un programilla de Google para chequear fuentes OpenType. Se puede hacer el check de Adobe, de Google, etc. Bot\u00f3n derecho sobre la carpeta que tengamos la fuente / Abrir Terminal en la carpeta. fontbakery check-adobe (arrastramos el archivo) Si todo est\u00e1 OK saldr\u00e1 una magdalena, si no toca pringar. Algunos de estos errores ser\u00e1n de dibujo, de los vertical metrics, de cualquier cosa, vamos. Unas pocas opciones extra: fontbakery -l FAIL check-adobe archivo para ver s\u00f3lo \ud83d\udd25 FAILs fontbakery check-adobefonts --html test.html nombre_de_archivo.html para tener los - resultados en html. fontbakery check-adobefonts --github-markdown test.md nombre_de_archivo.md para tener los resultados en Markdown. fontbakery -h para ver tooodas las opciones (o --help ). fontbakery check-adobefonts --help para ver la ayuda del check de Adobe concretamente.","title":"Chequeo de problemas con Fontbakery"},{"location":"generamos-fuentes/","text":"Generamos las fuentes Parece una chorrada, pero actualizar las m\u00e9tricas antes en todos los m\u00e1sters. Si todo est\u00e1 perfecto deber\u00edamos tener unos archivos fenomenales, pero echar una miradita con TTX no vendr\u00e1 mal. Chequear el Style Linking a porder ser con un PC. Si son tipos variables, habr\u00e1 que retocar la STAT table con TTX.","title":"Generamos las fuentes"},{"location":"generamos-fuentes/#generamos-las-fuentes","text":"Parece una chorrada, pero actualizar las m\u00e9tricas antes en todos los m\u00e1sters. Si todo est\u00e1 perfecto deber\u00edamos tener unos archivos fenomenales, pero echar una miradita con TTX no vendr\u00e1 mal. Chequear el Style Linking a porder ser con un PC. Si son tipos variables, habr\u00e1 que retocar la STAT table con TTX.","title":"Generamos las fuentes"},{"location":"preparando-todo/","text":"Preparando todo Hay que tener unas cuantas cosas instaladas y actualizadas para que todo vaya bien. Son unos pasos sencillos y si algo no chuta, siempre podr\u00e1s invitar a comer a tu amigo el inform\u00e1tico. Instalando python3 Escribe en el Terminal : which python3 y pulsa Enter. Este comando comprueba si Python 3 ya est\u00e1 instalado. Si el Terminal responde con una ruta como /usr/local/bin/python3 , entonces ya tienes la instalaci\u00f3n y puedes continuar con la siguiente. Si la respuesta dice python3 not found , entonces necesitaremos instalarlo. En ese caso, obt\u00e9ngalo a trav\u00e9s de una descarga desde https://www.python.org/downloads/macos/ (despl\u00e1cese hacia abajo y elija el instalador universal de macOS). \u00c1brelo, ejecuta el instalador y sigue las instrucciones en pantalla. Instalando pip3 Si tienes Python instalado, probablemente ya tengas pip3. pip es el gestor de paquetes para Python 3. Con \u00e9l, puedes instalar complementos para Python 3, normalmente bibliotecas que te dan acceso a comandos adicionales de Python. Python tiene su propio comando para instalar pip: python3 -m ensurepip --upgrade Incluso si ya tienes instalado pip3, considera: pip3 install --upgrade pip \u2026para asegurarte de que tienes la \u00faltima versi\u00f3n. M\u00e1s sobre la instalaci\u00f3n de pip : Instalando fonttools, brotli, zopfli, fontbakery Ahora podemos usar pip3 para las siguientes instalaciones. Escribe: pip3 install fonttools --upgrade pip3 install brotli --upgrade pip3 install zopfli --upgrade pip3 install fontbakery --upgrade Si las instalaciones con pip3 no funcionan, repite estas l\u00edneas con python3 -m pip al principio en vez de pip, as\u00ed: python3 -m pip install fonttools --upgrade python3 -m pip install brotli --upgrade python3 -m pip install zopfli --upgrade python3 -m pip install fontbakery --upgrade No hace est\u00e1 de m\u00e1s ejecutar este comando para una librer\u00eda que ya est\u00e1 instalada, porque con el sufijo --upgrade comprueba el n\u00famero de versi\u00f3n y actualiza a la \u00faltima versi\u00f3n si procede. Preparando Glyphs Instalar la \u00faltima versi\u00f3n de Glyphs. En \"Window/Plugin Manager\" desinstalar e instalar los Modules. En \"Scripts\", instalar los Mekkablue Scripts. En \"Preferencias/Addons\" escoger la versi\u00f3n de Python en la que pone \"Glyphs\".","title":"Preparando todo"},{"location":"preparando-todo/#preparando-todo","text":"Hay que tener unas cuantas cosas instaladas y actualizadas para que todo vaya bien. Son unos pasos sencillos y si algo no chuta, siempre podr\u00e1s invitar a comer a tu amigo el inform\u00e1tico.","title":"Preparando todo"},{"location":"preparando-todo/#instalando-python3","text":"Escribe en el Terminal : which python3 y pulsa Enter. Este comando comprueba si Python 3 ya est\u00e1 instalado. Si el Terminal responde con una ruta como /usr/local/bin/python3 , entonces ya tienes la instalaci\u00f3n y puedes continuar con la siguiente. Si la respuesta dice python3 not found , entonces necesitaremos instalarlo. En ese caso, obt\u00e9ngalo a trav\u00e9s de una descarga desde https://www.python.org/downloads/macos/ (despl\u00e1cese hacia abajo y elija el instalador universal de macOS). \u00c1brelo, ejecuta el instalador y sigue las instrucciones en pantalla.","title":"Instalando python3"},{"location":"preparando-todo/#instalando-pip3","text":"Si tienes Python instalado, probablemente ya tengas pip3. pip es el gestor de paquetes para Python 3. Con \u00e9l, puedes instalar complementos para Python 3, normalmente bibliotecas que te dan acceso a comandos adicionales de Python. Python tiene su propio comando para instalar pip: python3 -m ensurepip --upgrade Incluso si ya tienes instalado pip3, considera: pip3 install --upgrade pip \u2026para asegurarte de que tienes la \u00faltima versi\u00f3n. M\u00e1s sobre la instalaci\u00f3n de pip :","title":"Instalando pip3"},{"location":"preparando-todo/#instalando-fonttools-brotli-zopfli-fontbakery","text":"Ahora podemos usar pip3 para las siguientes instalaciones. Escribe: pip3 install fonttools --upgrade pip3 install brotli --upgrade pip3 install zopfli --upgrade pip3 install fontbakery --upgrade Si las instalaciones con pip3 no funcionan, repite estas l\u00edneas con python3 -m pip al principio en vez de pip, as\u00ed: python3 -m pip install fonttools --upgrade python3 -m pip install brotli --upgrade python3 -m pip install zopfli --upgrade python3 -m pip install fontbakery --upgrade No hace est\u00e1 de m\u00e1s ejecutar este comando para una librer\u00eda que ya est\u00e1 instalada, porque con el sufijo --upgrade comprueba el n\u00famero de versi\u00f3n y actualiza a la \u00faltima versi\u00f3n si procede.","title":"Instalando fonttools, brotli, zopfli, fontbakery"},{"location":"preparando-todo/#preparando-glyphs","text":"Instalar la \u00faltima versi\u00f3n de Glyphs. En \"Window/Plugin Manager\" desinstalar e instalar los Modules. En \"Scripts\", instalar los Mekkablue Scripts. En \"Preferencias/Addons\" escoger la versi\u00f3n de Python en la que pone \"Glyphs\".","title":"Preparando Glyphs"},{"location":"rellenando-font-info/","text":"Rellenando el Font Info La mayor\u00eda del \"Font Info\" es sencillo, o al menos enga\u00f1osamente sencillo. Aqu\u00ed no me meto en lo obvio ni en opciones que sirven para cosas muy espec\u00edficas. Es m\u00e1s un recordatorio de lo que se me olvida siempre que una gu\u00eda completa de lo que hay que poner. Pesta\u00f1as Font: Activar \"Use typo metrics\" \"fsType Embedding\": Editable. \"glyphOrder\" desordena la ventana Font, se puede hacer y activar al final del todo. \"Family Alignment Zones\" \"unicodeRanges & codePageRanges\" \"Export Mac Name Table Entries\" desactivado \"Panose\": No sirve pa na. Ponerlo vac\u00edo y rellenar s\u00f3lo si es monoespaciada. Si la tipo es monoespaciada: \"isFixedPitch\" activado. Masters: Hinting \"Autohinting: Zones\": Meter zonas extra para versalitas, numerales peque\u00f1os, etc. \"Autohinting: Stems\": Cuantos menos valores metamos, mejor. Como si es uno vertical y otro horizontal. Masters: Vertical Metrics Recuerden: Activar \"Use_Typo_Metrics\" en Fonts. Para calcular los VM, mejor hacerlo con el m\u00e1ster m\u00e1s pesado y copiar los resultados en los dem\u00e1s masters. Porque ojo: Toda la familia debe tener los mismos valores. Podemos usar el Script \"Mekkablue Font Info / Vertical Metrics Manager\" para ahorrar tiempo o hacerlo a manita. Valores hhea \"hheaAscender\" = Un poco m\u00e1s de la altura de la may\u00fascula acentuada (con un solo diacr\u00edtico) - m\u00e1s alta. Normalmente \u00c1 o \u00c5, idealmente >\u00c1. \"hheaDescender\" = Un poco m\u00e1s del punto m\u00e1s bajo de la min\u00fascula m\u00e1s baja. Normalmente g o \u00e7, idealmente >g. \"hheaLineGap\" = 0 No deben sumar 1000 necesariamente. Algo cerca de 1200 es deseable. Valores Typo \"typoAscender\" = \"hheaAscender\" \"typoDescender\" = \"hheaDescender\" \"typoLineGap\" = 0 En resumen, hhea==typo. Valores Win \"winAscent\" == El punto m\u00e1s alto de la familia (Para encontrarlo: \"Mekkablue / Test / Report Highest and Lower...\") \"winDescent\" == El punto m\u00e1s bajo de la familia (valor integro, aunque sea negativo, ponemos positivo). Si tras exportar, usamos el script \"Test/Webfont Test HTML\" con Metrics activado vemos como queda de centrada la tipo en un fondo gris. Si pensamos en nuestra tipo en un bot\u00f3n web, estar\u00eda bien que quedase centrado. Exports: Esto se entiende mucho mejor si antes lees sobre el archivo OpenType. Exports: General \"Name Table Entry: 1; \" El nombre de la familia si es RIBBI: Times New Roman El nombre del peso si no: Times New Roman SemiBold \"Name Table Entry: 2; \" Si es RIBBI: Regular, Bold, Italic, Bold Italic Si no es RIBBI: Regular o Italic \"Full Name\" o \"Custom P: Name Table Entry: 4; \" Nombre de fuente + nombre de estilo: Times New Roman Bold Italic \"Font Name\" o \"Custom P: Name Table Entry: 6; \" Nombre Postscript: TimesNewRoman-BoldItalic \"WWS Family Name\": Para tipos con estilos que no se ajusten a Weight Width Slope , como Optical Sizes: Times New Roman Display \"WWS Subfamily Name:\": Bold Italic Exports: Style Linking Importante para que el cuarteto RIBBI funcione bien en programas de mierda. El resto de instancias s\u00f3lo se linka con su italic (no intentar que Medium tenga su Bold, vamos). Exports: Custom Parameters \"Rename Glyphs\": Si tenemos versiones .bold de p. ej. el $ para nuestra variable y queremos exportarlas en est\u00e1ticas por defecto. Variables Export para Variables \"Add Variable Font Setting\" \"Name:\" Regular o Italic \"Localized Family Names: \" Si exportamos tanto est\u00e1ticas como variables, cambiamos el nombre a la variable para que se distinga en el men\u00fa: Times New Roman Variable \"Variations PostScript Name Prefix: \" Para poner un nombre postcript, sin espacios, a nuestro gusto: TimesNewRomanVF-Roman Custom Parameters Establecer \"Variable Font Origin\". Tiene que ser un m\u00e1ster. Si queremos Style Linking que vaya de Regular y Bold, el Regular tiene que ser m\u00e1ster. Si no, volver\u00e1 de Bold al m\u00e1ster de origen. \"File Name:\" Para que el archivo a exportar tenga el nombre que queramos y se distinga de las est\u00e1ticas: TimesNewRomanVF-Roman \"Name Table Entry: 1; \": El nombre de la familia + VF, variable...: Times New Roman Variable \"Name Table Entry: 2; \": Regular o Italic \"Full Name\" o \"Custom P: Name Table Entry: 4; \": Nombre de fuente + nombre de estilo: Times New Roman Variable En las instancias est\u00e1ticas: \"Axis Location\": Para la tabla AVAR en fuentes variables. Convierte nuestras coordenadas de dise\u00f1o en coordenadas para el usuario, con un peso 400 en Regular, 700 en Bold, etc. m\u00e1s sencillas de usar. Se chequea en https://www.axis-praxis.org/samsa/ Con el plugin \"mekkablue/UnnestComponents\" a\u00f1adimos el CP \"Filter: UnnestComponents\". Con el script \"Mekkablue / test / Variable Font test HTML\" podemos probar la fuente tras exportar. Other \"Font Type\": Variable Cursivas en fuentes variables Si tenemos una tipo inclinada lo normal es que vaya en el mismo archivo y todo vaya bastante bien, pero si tenemos cursivas aut\u00e9nticas en una variable tendremos dos archivos que no interpolan entre s\u00ed, pero querremos que funcione el style linking. Aunque tengamos una Slant, es mejor llamar al eje Italic (vete a saber por qu\u00e9). Las instancias deben tener Style Linking . Cada peso con su par en la romana, y la Bold Italic con Regular. Export: En \"Variable Font Setting\": - \"Name:\" Italic - \"Localized Family Names: \" Igual que en la romana: Times New Roman Variable - \"Variations PostScript Name Prefix: \" A\u00f1adimos Italic: TimesNewRomanVFItalic - \"FileName:\" TimesNewRomanVFItalic En TTX Podemos chequear en MacStyleValue y fsSelectionValue . Nombres Postscript: Al crearlos Glyphs pone dos veces Italic. No es importante pero podemos borrar el segundo para acortarlo: TimesNewRomanVFItalic-Regular","title":"Font Info"},{"location":"rellenando-font-info/#rellenando-el-font-info","text":"La mayor\u00eda del \"Font Info\" es sencillo, o al menos enga\u00f1osamente sencillo. Aqu\u00ed no me meto en lo obvio ni en opciones que sirven para cosas muy espec\u00edficas. Es m\u00e1s un recordatorio de lo que se me olvida siempre que una gu\u00eda completa de lo que hay que poner.","title":"Rellenando el Font Info"},{"location":"rellenando-font-info/#pestanas","text":"","title":"Pesta\u00f1as"},{"location":"rellenando-font-info/#font","text":"Activar \"Use typo metrics\" \"fsType Embedding\": Editable. \"glyphOrder\" desordena la ventana Font, se puede hacer y activar al final del todo. \"Family Alignment Zones\" \"unicodeRanges & codePageRanges\" \"Export Mac Name Table Entries\" desactivado \"Panose\": No sirve pa na. Ponerlo vac\u00edo y rellenar s\u00f3lo si es monoespaciada. Si la tipo es monoespaciada: \"isFixedPitch\" activado.","title":"Font:"},{"location":"rellenando-font-info/#masters-hinting","text":"\"Autohinting: Zones\": Meter zonas extra para versalitas, numerales peque\u00f1os, etc. \"Autohinting: Stems\": Cuantos menos valores metamos, mejor. Como si es uno vertical y otro horizontal.","title":"Masters: Hinting"},{"location":"rellenando-font-info/#masters-vertical-metrics","text":"Recuerden: Activar \"Use_Typo_Metrics\" en Fonts. Para calcular los VM, mejor hacerlo con el m\u00e1ster m\u00e1s pesado y copiar los resultados en los dem\u00e1s masters. Porque ojo: Toda la familia debe tener los mismos valores. Podemos usar el Script \"Mekkablue Font Info / Vertical Metrics Manager\" para ahorrar tiempo o hacerlo a manita.","title":"Masters: Vertical Metrics"},{"location":"rellenando-font-info/#valores-hhea","text":"\"hheaAscender\" = Un poco m\u00e1s de la altura de la may\u00fascula acentuada (con un solo diacr\u00edtico) - m\u00e1s alta. Normalmente \u00c1 o \u00c5, idealmente >\u00c1. \"hheaDescender\" = Un poco m\u00e1s del punto m\u00e1s bajo de la min\u00fascula m\u00e1s baja. Normalmente g o \u00e7, idealmente >g. \"hheaLineGap\" = 0 No deben sumar 1000 necesariamente. Algo cerca de 1200 es deseable.","title":"Valores hhea"},{"location":"rellenando-font-info/#valores-typo","text":"\"typoAscender\" = \"hheaAscender\" \"typoDescender\" = \"hheaDescender\" \"typoLineGap\" = 0 En resumen, hhea==typo.","title":"Valores Typo"},{"location":"rellenando-font-info/#valores-win","text":"\"winAscent\" == El punto m\u00e1s alto de la familia (Para encontrarlo: \"Mekkablue / Test / Report Highest and Lower...\") \"winDescent\" == El punto m\u00e1s bajo de la familia (valor integro, aunque sea negativo, ponemos positivo). Si tras exportar, usamos el script \"Test/Webfont Test HTML\" con Metrics activado vemos como queda de centrada la tipo en un fondo gris. Si pensamos en nuestra tipo en un bot\u00f3n web, estar\u00eda bien que quedase centrado.","title":"Valores Win"},{"location":"rellenando-font-info/#exports","text":"Esto se entiende mucho mejor si antes lees sobre el archivo OpenType.","title":"Exports:"},{"location":"rellenando-font-info/#exports-general","text":"\"Name Table Entry: 1; \" El nombre de la familia si es RIBBI: Times New Roman El nombre del peso si no: Times New Roman SemiBold \"Name Table Entry: 2; \" Si es RIBBI: Regular, Bold, Italic, Bold Italic Si no es RIBBI: Regular o Italic \"Full Name\" o \"Custom P: Name Table Entry: 4; \" Nombre de fuente + nombre de estilo: Times New Roman Bold Italic \"Font Name\" o \"Custom P: Name Table Entry: 6; \" Nombre Postscript: TimesNewRoman-BoldItalic \"WWS Family Name\": Para tipos con estilos que no se ajusten a Weight Width Slope , como Optical Sizes: Times New Roman Display \"WWS Subfamily Name:\": Bold Italic","title":"Exports: General"},{"location":"rellenando-font-info/#exports-style-linking","text":"Importante para que el cuarteto RIBBI funcione bien en programas de mierda. El resto de instancias s\u00f3lo se linka con su italic (no intentar que Medium tenga su Bold, vamos).","title":"Exports: Style Linking"},{"location":"rellenando-font-info/#exports-custom-parameters","text":"\"Rename Glyphs\": Si tenemos versiones .bold de p. ej. el $ para nuestra variable y queremos exportarlas en est\u00e1ticas por defecto.","title":"Exports: Custom Parameters"},{"location":"rellenando-font-info/#variables","text":"","title":"Variables"},{"location":"rellenando-font-info/#export-para-variables","text":"\"Add Variable Font Setting\" \"Name:\" Regular o Italic \"Localized Family Names: \" Si exportamos tanto est\u00e1ticas como variables, cambiamos el nombre a la variable para que se distinga en el men\u00fa: Times New Roman Variable \"Variations PostScript Name Prefix: \" Para poner un nombre postcript, sin espacios, a nuestro gusto: TimesNewRomanVF-Roman","title":"Export para Variables"},{"location":"rellenando-font-info/#custom-parameters","text":"Establecer \"Variable Font Origin\". Tiene que ser un m\u00e1ster. Si queremos Style Linking que vaya de Regular y Bold, el Regular tiene que ser m\u00e1ster. Si no, volver\u00e1 de Bold al m\u00e1ster de origen. \"File Name:\" Para que el archivo a exportar tenga el nombre que queramos y se distinga de las est\u00e1ticas: TimesNewRomanVF-Roman \"Name Table Entry: 1; \": El nombre de la familia + VF, variable...: Times New Roman Variable \"Name Table Entry: 2; \": Regular o Italic \"Full Name\" o \"Custom P: Name Table Entry: 4; \": Nombre de fuente + nombre de estilo: Times New Roman Variable En las instancias est\u00e1ticas: \"Axis Location\": Para la tabla AVAR en fuentes variables. Convierte nuestras coordenadas de dise\u00f1o en coordenadas para el usuario, con un peso 400 en Regular, 700 en Bold, etc. m\u00e1s sencillas de usar. Se chequea en https://www.axis-praxis.org/samsa/ Con el plugin \"mekkablue/UnnestComponents\" a\u00f1adimos el CP \"Filter: UnnestComponents\". Con el script \"Mekkablue / test / Variable Font test HTML\" podemos probar la fuente tras exportar.","title":"Custom Parameters"},{"location":"rellenando-font-info/#other","text":"\"Font Type\": Variable","title":"Other"},{"location":"rellenando-font-info/#cursivas-en-fuentes-variables","text":"Si tenemos una tipo inclinada lo normal es que vaya en el mismo archivo y todo vaya bastante bien, pero si tenemos cursivas aut\u00e9nticas en una variable tendremos dos archivos que no interpolan entre s\u00ed, pero querremos que funcione el style linking. Aunque tengamos una Slant, es mejor llamar al eje Italic (vete a saber por qu\u00e9). Las instancias deben tener Style Linking . Cada peso con su par en la romana, y la Bold Italic con Regular.","title":"Cursivas en fuentes variables"},{"location":"rellenando-font-info/#export","text":"En \"Variable Font Setting\": - \"Name:\" Italic - \"Localized Family Names: \" Igual que en la romana: Times New Roman Variable - \"Variations PostScript Name Prefix: \" A\u00f1adimos Italic: TimesNewRomanVFItalic - \"FileName:\" TimesNewRomanVFItalic","title":"Export:"},{"location":"rellenando-font-info/#en-ttx","text":"Podemos chequear en MacStyleValue y fsSelectionValue . Nombres Postscript: Al crearlos Glyphs pone dos veces Italic. No es importante pero podemos borrar el segundo para acortarlo: TimesNewRomanVFItalic-Regular","title":"En TTX"}]}